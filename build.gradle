import java.text.SimpleDateFormat
import java.util.Date

// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_packaging
plugins {
    id 'java'
    // For source code formatting
    id "com.diffplug.spotless" version "6.25.0"
	// https://github.com/harbby/gradle-serviceloader
    id "com.github.harbby.gradle.serviceloader" version "1.1.8"
    // Download task
    id "de.undercouch.download" version "5.6.0"
	// Task visualizer
	id "com.dorongold.task-tree" version "3.0.0"
}

/**
 * Project Properties
 */
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
ext {
	buildID = System.getenv( 'BUILD_ID' ) ?: '0'
	branch = System.getenv( 'BRANCH' ) ?: 'development'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
	// LOCAL DEVELOPMENT ONLY
	// CHOOSE THE RIGHT LOCATION FOR YOUR LOCAL DEPENDENCIES
    compileOnly files( '../boxlang/build/distributions/boxlang-' + boxlangVersion + '-all.jar' )

	// Production Dependency
    compileOnly files( 'src/test/resources/libs/boxlang-' + boxlangVersion + '-all.jar' )
	// https://mvnrepository.com/artifact/io.undertow/undertow-core/2.3.12.Final
	compileOnly 'io.undertow:undertow-core:2.3.14.Final'

	// For HTML Parsing
	implementation 'org.jsoup:jsoup:1.17.2'

    // Testing Dependencies
	testImplementation files( 'src/test/resources/libs/boxlang-' + boxlangVersion + '-all.jar' )
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"
}

java {
	withJavadocJar()
}

compileJava {
	// Compiler Options
	options.incremental = true
	options.encoding = 'UTF-8'
	options.debug()
}

compileTestJava {
	source sourceSets.test.java
	dependsOn compileJava, serviceLoaderBuild
	options.encoding = 'UTF-8'
}

jar {
    archiveVersion =  "${version}"
 	manifest {
	   	attributes 'Description': 'The BoxLang Web Support Package'
		 if( branch == 'development' ){
		   attributes 'Implementation-Version': "${version}-SNAPSHOT"
	   } else {
		   attributes 'Implementation-Version': "${version}+${buildID}"
	   }
	   attributes 'Created-On': new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format( new Date() )
	   attributes 'Created-By': "Ortus Solutions, Corp"
    }
}

/**
 * Docs are here:
 * - https://github.com/harbby/gradle-serviceloader,
 * - https://plugins.gradle.org/plugin/com.github.harbby.gradle.serviceloader
 * This generates the META-INF/services files for the ServiceLoader as part of the `build` task
 */
serviceLoader {
    serviceInterface 'ortus.boxlang.runtime.bifs.BIF'
    serviceInterface 'ortus.boxlang.runtime.components.Component'
    serviceInterface 'ortus.boxlang.runtime.async.tasks.IScheduler'
    serviceInterface 'ortus.boxlang.runtime.cache.providers.ICacheProvider'
	serviceInterface 'ortus.boxlang.runtime.events.IInterceptor'
}

/**
 * Token Replacements for files
 */
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	// Replace @build.date@ with the current date in META-INF/version.properties file
	filter( ReplaceTokens, tokens: [ 'build.date': new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format( new Date() ) ] )
	// Replace @build.version@ with the current version in META-INF/version.properties file
	filter( ReplaceTokens, tokens: [ 'build.version': version ] )
	// If we are in branch == development then update +build.number to -SNAPSHOT
	if( branch == 'development' ){
		filter( ReplaceTokens, tokens: [ 'build.number': "-SNAPSHOT" ] )
	} else {
		filter( ReplaceTokens, tokens: [ 'build.number': "+" + buildID ] )
	}
}

javadoc {
    // To avoid our own doclet issues
	options.addBooleanOption( "Xdoclint:none", true )
	options.addBooleanOption( 'html5', true )
}
task zipJavadocs( type: Zip ) {
	dependsOn javadoc
	group "documentation"
	from javadoc.destinationDir
	archiveFileName = "${project.name}-javadocs-${version}.zip"
	destinationDirectory = file( "$buildDir/distributions" )
	// Output that the docs have been zippped
	doLast {
		println "+ Javadocs have been zipped to the distribution folder"
	}
}
javadoc.finalizedBy( zipJavadocs )

/**
 * Task moves the contents of the `libs` folder to the `distributions` folder
 and must run after build
 */
task libsToDistro( type: Copy ) {
	dependsOn build
	from 'build/libs'
	into "$buildDir/distributions"
	// Output that the libs have been moved
	doLast {
		println "+ Libs have been moved to the distribution folder"
	}
}
build.finalizedBy( libsToDistro )

/**
 * Source Code Formatting
 */
spotless {
    java {
		target fileTree( "." ) {
            include "**/*.java"
            exclude "**/build/**", "bin/**", "examples/**"
        }
        eclipse().configFile( "./.ortus-java-style.xml" )
		toggleOffOn()
    }
}

test {
    useJUnitPlatform()
    testLogging {
		showStandardStreams = true
	}
}

/**
 * TEMPORARY until we publish to maven
 * Task to download the latest jar from https://ortus-temp.s3.amazonaws.com/jericho/libs/boxlang-1.0.0-all.jar
 */
task downloadBoxLang( type: Download ) {
	// Create the destination directory
	doFirst {
		file( "src/test/resources/libs" ).mkdirs()
	}
    // Configure the URL of the file to download
    src "https://downloads.ortussolutions.com/ortussolutions/boxlang/${boxlangVersion}/boxlang-${boxlangVersion}-all.jar"
    // Specify the destination directory for the downloaded file
    dest "src/test/resources/libs/boxlang-${boxlangVersion}-all.jar"
    overwrite true
    onlyIfModified false
}

/**
 * Project Wide Helper function
 * This is not a task, but a reusable UDF
 */
project.ext.bumpVersion = {
	boolean major = false,
	boolean minor = false,
	boolean patch = false,
	boolean beta = false,
	property = "version" ->

	def propertiesFile = file( './gradle.properties' );
	def properties = new Properties();

	properties.load( propertiesFile.newDataInputStream() )
	def versionTarget = major ? 0 : minor ? 1 : 2

	def currentVersion = properties.getProperty( property )
	def versionParts = currentVersion.split( '\\.' )
	if( !beta ){
		def newPathVersion = versionParts[ versionTarget ].toInteger() + 1
	}
	def newVersion = '';

	if( patch ){
		newVersion = "${versionParts[ 0 ]}.${versionParts[ 1 ]}.${newPathVersion}"
	} else if( minor ){
		newVersion = "${versionParts[ 0 ]}.${newPathVersion}.${versionParts[ 2 ]}"
	} else if( major ){
		newVersion = "${newPathVersion}.${versionParts[ 1 ]}.${versionParts[ 2 ]}"
	} else if( beta ){
		// Get's the -betaX version.
		def betaString = currentVersion.split( '-' )[ 1 ]
		// Now we get the beta number
		def betaNumber = betaString.split( 'beta' )[ 1 ].toInteger() + 1
		newVersion = currentVersion.split( '-' )[ 0 ] + "-beta${betaNumber}"
	}

	properties.setProperty( property, newVersion )
	properties.store( propertiesFile.newWriter(), null )

	println "Bumped version from ${currentVersion} to ${newVersion}"
}

/**
 * Bump the major version number
 */
task bumpMajorVersion {
	doLast{
		bumpVersion( true, false, false, false, "version" )
		bumpVersion( true, false, false, false, "boxlangVersion" )
	}
}

/**
 * Bump the minor version number
 */
task bumpMinorVersion {
	doLast{
		bumpVersion( false, true, false, false, "version" )
		bumpVersion( false, true, false, false, "boxlangVersion" )
	}
}

/**
 * Bump the patch version number
 */
task bumpPatchVersion {
	doLast{
		bumpVersion( false, false, true, false, "version" )
		bumpVersion( false, false, true, false, "boxlangVersion" )
	}
}

/**
 * Bump the beta version number
 */
task bumpBetaVersion {
	doLast{
		bumpVersion( false, false, false, true, "version" )
		bumpVersion( false, false, false, true, "boxlangVersion" )
	}
}
